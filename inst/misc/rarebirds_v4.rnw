\documentclass[10pt]{article}
\usepackage[margin=1in]{geometry}
\title{Sharing probabilities for rare variants in oral cleft candidate genes}
\author{Alexandre Bureau and Ingo Ruczinski}

\SweaveOpts{keep.source=FALSE}

\begin{document}
 
\maketitle
\setkeys{Gin}{width=0.8\textwidth}

<<echo=FALSE>>=
library(kinship2)
source("rcode/get.LODallshare.r")
@
% Important note: the files containing the variants have changed compared to version 2

\section{Reading the required data}

We set the data directory and read the files with the low frequency shared variants and with all rare variants.
%<<reading data>>=
<<reading data,eval=FALSE>>=
# Specifying the data directory
vardir = "/thumper/ctsa/beaty/wes/low.frequency.4.16.2013"
#vardir <- "/Users/ingo/blinux21/research/projects/2013/bureau/sweave/data/low.frequency"

# Reading the file containing the shared variants
low.freq = read.table(paste(vardir,"/allsharedlowfrequency.txt",sep=""),header=TRUE,sep="\t",na.strings=c("NA","."))

# Reading the file containing all variants
low.freq.all = read.table(paste(vardir,"/alllowfrequency.txt",sep=""),header=TRUE,sep="\t",na.strings=c("NA","."))

# Reading the list of candidate genes (from the current directory)
candidate.genes = scan("data/candidate.genes.txt", what=character(), skip=1)
@

We extract data for the candidate genes from the data frames containing all genes.
%<<extracting candidates>>=
<<extracting candidates,eval=FALSE>>=
candidate.low.freq = low.freq[low.freq$RefgeneGeneName%in%candidate.genes,] 
candidate.low.freq.all = low.freq.all[low.freq.all$RefgeneGeneName%in%candidate.genes,] 
@

\section{Computing kinship coefficients}
We began by reading the pedigree data, removing the singletons from the file and creating a pedigree object.
<<read ped data>>=
# Reading in the data
ocped = read.csv2("data/germ_pitts_tw_iowa_syr_pedigree_jbh.csv")
# Removing the subjects with the DNA variable = 2 (these are singletons)
ocped = ocped[ocped$DNA<2,]

library(kinship2)
# creating list of pedigrees
largeped.list = pedigree(id=ocped$Indiv,dadid=ocped$Father,momid=ocped$Mother,sex=ocped$Sex,affected=ocped$DNA,famid=ocped$Seq_fam)
@

We computed the expected kinship coefficient of all sequenced subjects and imported the kinship inferred from genomewide SNP genotype data using King. A few subjects selected for sequencing (with DNA = 1) are not included in the file of inferred kinship, because they were not successfully genotyped. 

<<compute kinship>>=
# Computing kinship between all pairs of pedigree members
oc.bigkin = kinship(largeped.list)
# Extracting subset of subjects that have been sequenced
ocaffected.kin = oc.bigkin[ocped$DNA==1,ocped$DNA==1]
tmp.suj = strsplit(dimnames(ocaffected.kin)[[2]],"/")
# Correction to ids with a single digit to insert a leading 0
insert0 = function(vec)
{
if (nchar(vec[2])==1) vec[2] = paste("0",vec[2],sep="")
vec
}
tmp2.suj = sapply(tmp.suj,insert0)
list.suj.kin=apply(tmp2.suj,2,function(vec) paste(vec[1],vec[2],sep="_"))
# Replacing the dimnames of ocaffected.kin with the reformated local IDs
dimnames(ocaffected.kin)=list(list.suj.kin,list.suj.kin)

# Reading King kinship estimates
ocaffected.inferedkin = read.table("data/oc_cleaned05_related.kin",header=T)
seqfam = ocaffected.inferedkin$FID[-1]

# Extracting the expected kinship corresponding to the infered kinship
expected.kin.by.pair = apply(ocaffected.inferedkin[-1,2:3],1,function(vec) ifelse(vec[1]%in%dimnames(ocaffected.kin)[[1]],as.numeric(ocaffected.kin[dimnames(ocaffected.kin)[[1]]==vec[1],dimnames(ocaffected.kin)[[2]]==vec[2]]),NA))

@

\section{Computing the rare variant sharing probability for all pedigrees}
We trimmed the descendants with no DNA. We first applied an automatic trimming, then inspected the resulting pedigrees and manually trimmed additionnal superfluous pedigree members.
<<trimming unavailable>>=

# Trimming pedigrees and storing them in a list
ped.list = list()
fam.vec = unique(ocped$Seq_fam)

for (i in 1:length(fam.vec))
  {
  avec = ocped$DNA[ocped$Seq_fam==fam.vec[i]]
  unav.list = findUnavailable(largeped.list[i],avec)
  ped.list[[i]] = pedigree.trim(unav.list,largeped.list[i])
}

# Identifying subjects whose two parents are non-founders
child.of.2nonfounders = function(ped) any(ped$findex[ped$findex] != 0 & ped$findex[ped$mindex] != 0)

child.of.2nonfounders.vec = sapply(ped.list,child.of.2nonfounders)
which( child.of.2nonfounders.vec)
# Founder couple with a single descendant in family 54 needs to be removed
# Subjects in inbreeding loop affecting a single subject in families 21 and 41 need to be removed

ped.list[[21]] = pedigree.trim(c(17,18),ped.list[[21]])
ped.list[[41]] = pedigree.trim(c(31,32),ped.list[[41]])
ped.list[[54]] = pedigree.trim(c(1,2,5,17),ped.list[[54]])
@
Next, we identify the sequenced subjects from complex inbred pedigrees and those that are not final descendants.
<<Identifying noncomputable peds>>==
# Repeat Identifying subjects whose two parents are non-founders
child.of.2nonfounders.vec = sapply(ped.list,child.of.2nonfounders)
which( child.of.2nonfounders.vec)
# Complex inbred pedigrees

# Identifying subjects with DNA who are not final descendants
seq.nonfinal = function(ped) any((ped$id%in%ped$id[ped$findex] | ped$id%in%ped$id[ped$mindex]) & ped$affected)

seq.nonfinal.vec = sapply(ped.list,seq.nonfinal)
which(seq.nonfinal.vec)
# 3 Grand-parents
@

Finally, we remove the complex inbred pedigrees and grand-parent - grand-child pairs and perform the computation of the RV sharing probability in the remaining pedigrees.
<<compute sharing>>=
ped.tocompute = ped.list[!child.of.2nonfounders.vec & !seq.nonfinal.vec]
ped.tocompute.vec = fam.vec[!child.of.2nonfounders.vec & !seq.nonfinal.vec]
length(ped.tocompute)

# Computation of sharing probabilities
source("rcode/rare_variant_sharing_v3.r")
oc.pshare = sapply(ped.tocompute,RVsharing.ped.pshare)

# Correction of probability for pedigree 17103 because of marriage loop
expectedkin.f17103 = expected.kin.by.pair[seqfam=="17103"]
oc.pshare[ped.tocompute.vec==17103] = expectedkin.f17103/(1-expectedkin.f17103)
# Correction of probability for pedigree 28005 because of marriage loop
expectedkin.f28005 = expected.kin.by.pair[seqfam=="28005"]
oc.pshare[ped.tocompute.vec==28005] = expectedkin.f28005/(1-expectedkin.f28005)
# Addition of probabilities for granp-parent - grand-child pairs
ped.tocompute.vec = c(ped.tocompute.vec, sapply(ped.list[seq.nonfinal.vec],function(obj) obj$famid[1]))
oc.pshare=c(oc.pshare,rep(1/7,3))
oc.pshare.res = data.frame(ped.tocompute.vec,oc.pshare,-log(oc.pshare,10))
names(oc.pshare.res)[3] = "mlog10pshare"
@

\section{Novel variants predicted to be damaging}

Next we find the novel variants predicted to be damaging based on a Sift score < 0.05 and count in how many families they are shared and in how many family they appear at all.

<<novel damaging candidates>>=
#<<novel damaging candidates,eval=FALSE>>=
candidate.noveldamaging.shared <- tapply(is.na(candidate.low.freq$ID) & 
                                         !is.na(candidate.low.freq$SiftScore) & candidate.low.freq$SiftScore<=0.05,as.character(candidate.low.freq$mergevar),sum)

candidate.noveldamaging.all = tapply(is.na(candidate.low.freq.all$ID) & !is.na(candidate.low.freq.all$SiftScore) & candidate.low.freq.all$SiftScore<=0.05,as.character(candidate.low.freq.all$mergevar),sum)

table(candidate.noveldamaging.shared)
rarebirds = names(candidate.noveldamaging.shared)[candidate.noveldamaging.shared>0]
rarebirds
table(candidate.noveldamaging.all)
candidate.noveldamaging.all.seen = candidate.noveldamaging.all[candidate.noveldamaging.all>0]
@
The following table gives the number of families in which the shared novel variants predicted to be damaging have been seen in total. 

<<examine novel damaging candidates>>=
#<<examine novel damaging candidates,eval=FALSE>>=
candidate.noveldamaging.all[rarebirds]
# Keeping the variants seen only in one family
true.rarebirds = rarebirds[candidate.noveldamaging.all[rarebirds]==1]
@
We find \Sexpr{length(rarebirds)} variants shared in one family out of a total of \Sexpr{length(candidate.noveldamaging.all.seen)} novel variants predicted to be damaging. One of these variants on chromosome 6 at position 10410472 is present in 10 families (shared in 1 and not shared in 9). Observing sharing in one family out of 10 is not unusual, so this variant will not be considered further.

For the  \Sexpr{length(true.rarebirds)} remaining variants, we retrieve the family in which they are shared, and look up the null probability of sharing a variant in that family.


<<extracting sharing probability>>=
#<<extracting sharing probability,eval=FALSE>>=

# Retrieving the family in which the rare birds are shared
true.rarebirds.fams = candidate.low.freq[candidate.low.freq$mergevar%in%true.rarebirds,c("id","mergevar")]
true.rarebirds.sharingprob = merge(true.rarebirds.fams,oc.pshare.res[oc.pshare.res$ped.tocompute.vec%in%true.rarebirds.fams$id,],by.x="id",by.y="ped.tocompute.vec")
true.rarebirds.sharingprob 
@
We now compute the minimal null probability that each of the novel variants predicted to be damaging could yield if it were shared by the sequenced individuals in all families where it was seen.
<<conditional power>>=
#<<conditional power,eval=FALSE>>=
fams.for.candidate.condpower = candidate.low.freq.all$id[candidate.low.freq.all$mergevar%in%names(candidate.noveldamaging.all.seen)]
vars.for.candidate.condpower = candidate.low.freq.all$mergevar[candidate.low.freq.all$mergevar%in%names(candidate.noveldamaging.all.seen)]
logpshared.candidate.vec = tapply(fams.for.candidate.condpower,vars.for.candidate.condpower,get.LODallshare,pshare=oc.pshare.res)
@ 

Taking that probability under the null as a p-value, we determine how many variants could survive a Bonferroni correction for the number of variants tested.
This number is the intersection of the curves on figure~\ref{Bonferroni}.

<<plot Bonferroni>>=
#<<plot Bonferroni,eval=FALSE>>=
scondpower =  sort(logpshared.candidate.vec)
pdf("bonferroni.pdf",width=4,height=4)
plot(length(scondpower):1,scondpower,log="x",xlab="rank of variant",ylab="-log10 (p-value)")
lines(c(1,length(scondpower)),-log(0.05,10) + log(c(1,length(scondpower)),10))
dev.off()
@

\begin{figure}
  \centering{\includegraphics{bonferroni}}
  \label{Bonferroni}
\end{figure}

We can see from the plot that 15 variants have a p-value low enough to survive the Bonferroni correction. The following table shows the Bonferroni corrected p-values.
%10^-scondpower[length(scondpower)-15]*15
%scondpower[length(scondpower)-15]

<<Bonferroni correction>>=
#<<Bonferroni correction, eval=FALSE>>=
true.rarebirds.sharingprob$Bonferronip = true.rarebirds.sharingprob$oc.pshare*15
true.rarebirds.sharingprob[true.rarebirds.sharingprob$Bonferronip<0.05,]
@
The p-value for the variant in CDH1 on chromosome 16 remains significant after correcting for the number of variants with sufficient power.

\section{Adjusting the null sharing probability for excess sharing due to cryptic relatedness}



Figure~\ref{kinship_relatives} show the inferred vs. expected kinship coefficients between relatives. The inferred sharing is always greater than the expected sharing, by a greatly varying amount.\\

<<>>=
pdf("kinship.pdf")
plot(expected.kin.by.pair,ocaffected.inferedkin$Kinship[-1],xlab="expected kinship",ylab="observed kinship",ylim=c(0,0.2))
abline(0,1)
dev.off()
@

\begin{figure}
  \centering{\includegraphics{kinship}}
  \label{kinship}
\end{figure}




Family 15157 with a low null probability of sharing based on the known pedigree structure shown on figure~\ref{family15157}. We now extract the kinship coefficients between the affected members of that family, and change the names of the matrix dimensions to keep just the subject number.

<<>>=
pdf("family15157.pdf")
plot(largeped.list[13])
dev.off()
@



\begin{figure}
  \centering{\includegraphics{family15157}}
  \label{family15157}
\end{figure}



<<extract 15157 kin,eval=FALSE>>=
# Getting the family ID of every subject in the inferred kinship file
expectedkin.f15157 = expected.kin.by.pair[seqfam=="15157"]
expectedkin.f15157
inferedkin.f15157.mat = ocaffected.inferedkin[ocaffected.inferedkin$FID=="15157",]
inferedkin.f15157.mat
@

The inferred kinship coefficients is larger than expected only for the pair of sequenced subjects 402-405, but negative for the other pairs, suggesting that subject 404 may be admixed, according to Manichaikul et al. 2010.\\

\subsection{Adjustment assuming a single pair of founders are related}

This approach involves infering the value that the kinship coefficients of each founder pair would need to be so that the unobserved relateness between that founder pair alone explains the excess sharing (equations 16 and 17 of Bureau and Ruczinski). In order to do that, we first need to run the RVsharing function (or RVsharing.weighted with phi=0) to get the degrees of relatedness between pedigree members that are stored in the object it returns. We set the negative inferred kinship coefficients to the expected value for these computations.

<<fam 15157 sharing calc,eval=FALSE>>=
f15157.id = largeped.list[13]$id
f15157.dadid = f15157.momid = numeric(length(f15157.id))
f15157.dadid[largeped.list[13]$findex>0] = largeped.list[13]$id[largeped.list[13]$findex]
f15157.momid[largeped.list[13]$findex>0] = largeped.list[13]$id[largeped.list[13]$mindex]
inferedkin.f15157 = pmax(inferedkin.f15157.mat$Kinship,expectedkin.f15157)
#source("rcode/rare_variant_sharing_weighted_v2.r")

p.15157 = RVsharing(f15157.id,f15157.dadid,f15157.momid)

source("rcode/estimate_kinship_founders.r")
fkin.est.f15157 = estimate.kinship.founders(p.15157,inferedkin.f15157,expectedkin.f15157)
@

Inspection of the estimates of kinship between founders obtained from the inferred kinship of the three pairs of sequenced subjects for a few founder pairs shows that they are close, and it is reasonnable to take the average.

<<averaging founder kinship,eval=FALSE>>=
fkin.est.f15157["101","102",,]
fkin.est.f15157["101","202",,]
fkin.est.f15157["101","302",,]
fkin.mean.f15157 = apply(fkin.est.f15157,1:2,function(mat) mean(mat[mat>0]))
fkin.mean.f15157
@

The following step is to compute the sharing probability between the sequenced subjects, taking each founder pair in turn to be the related pair. We consider only the pairs involving at least one member of the founder couple 101 and 102, since those pairs are the only ones for which unobserved relatedness could explain the excess kinship between all three sequenced subjects. There are 13 such pairs: 6 pairs between subject 101 and founders specific to one sequenced subject, 6 pairs between subject 102 and founders specific to one sequenced subject, and the pair 101 - 102. The kinship between each founders specific to one sequenced subject and 101 equals the kinship between the same founder and 102, so we only need to do the computation for one of the two.\\

The function RVsharing.weighted computes the probability that all sequenced subjects inherit the variant from a single ancestor (num) and the probability that no sequenced subject inherited the variant from any of the founders given that a single copy of the variant is present in the founders (p0), weighted by the probability that each founder introduced the variant given that a specified pair of founders are related with specified kinship coefficient, using equation 15 of Bureau and Ruczinski. This is simply computing the portion of the numerator and denominator of the sharing probability due to the events that a single copy of the variant is introduced into the pedigree. The computation of the portion due to the event that two copies of the variant are introduced into the pedigree is not implemented yet. I wrote the expressions specific to family 15157 for this computation based on the formulas in Section 2.2 of Bureau and Ruczinski.

<<adjusted sharing,eval=FALSE>>=
# Computation of adjusted variant sharing prob
Nf = nrow(fkin.mean.f15157)
Ds = 9
nfd = 3

pshare.f15157.vec = numeric(7)
# case of founder couple 101 and 102
tmp = RVsharing.weighted(f15157.id,f15157.dadid,f15157.momid,relfounders=c("101","102"),phi=min(fkin.mean.f15157["101","102"],0.5))
# Expression for probability that all receive variant from equation 18 of Bureau and Ruczinski
numa = 1/2^(Ds-nfd) * 2*min(fkin.mean.f15157["101","102"],0.5)/(2*Nf-1) + tmp$num
# Vector of terms from equation 20 of Bureau and Ruczinski
vt = numeric(10)
# 0 child gets 2, 0 gets 1
vt[1] = 1/4^3
# 0 child gets 2, 1 gets 1
vt[2] = 3 * 3/4 * 1/(4*4*2)
# 0 child gets 2, 2 get 1
vt[3] = 3 * (3/4)^2 * 1/(4*2*2)
# 0 child gets 2, 3 get 1
vt[4] = (3/4)^3 * 1/2^3
# 1 child gets 2, 0 gets 1
vt[5] = 3 * 1/2 * 1/4^3
# 1 child gets 2, 1 gets 1
vt[6] = 6 * 1/2 * 3/4 * 1/(4*4*2)
# 1 child gets 2, 2 get 1
vt[7] = 3 * 1/2 * (3/4)^2 * 1/(4*2*2)
# 2 children get 2, 1 gets 0
vt[8] = 3 * 1/2^2 * 1/4^3
# 2 children get 2, 1 gets 1
vt[9] = 3 * 1/2^2 * 3/4 * 1/(4*4*2)
# 3 children get 3
vt[10] = 1/2^3 * 1/4^3

# Computation of probability that none receive variant 
p0a = sum(vt) * 2*min(fkin.mean.f15157["101","102"],0.5)/(2*Nf-1) + tmp$p0

# Adjusted sharing probability if founders 101 and 102 are related
pshare.f15157.vec[1] = numa/(1-p0a)

# case of founder 101 or 102 with founders 202, 205 or 207
for (f in 3:5)
  {
  tmp = RVsharing.weighted(f15157.id,f15157.dadid,f15157.momid,relfounders=c("101",dimnames(fkin.mean.f15157)[[1]][f]),phi=min(fkin.mean.f15157["101",f],0.5))
  # Expression for probability that all receive variant from equation 21 of Bureau and Ruczinski
  numa = 1/2^7 *(1/2^2 + 1/2) * 2*min(fkin.mean.f15157["101",f],0.5)/(2*Nf-1) + tmp$num
  # Expression for probability that none receive variant from equation 23 of Bureau and Ruczinski
  p0a = (1/2^3 + 3/4*1/2 + 1/2^2)*(1 - 1/2^3)^2 * 2*min(fkin.mean.f15157["101",f],0.5)/(2*Nf-1) + tmp$p0
  pshare.f15157.vec[f-1] = numa/(1-p0a)
  }

# case of founder 101 or 102 with founders 302, 307 or 309
for (f in 6:8)
  {
  tmp = RVsharing.weighted(f15157.id,f15157.dadid,f15157.momid,relfounders=c("101",dimnames(fkin.mean.f15157)[[1]][f]),phi=min(fkin.mean.f15157["101",f],0.5))
  # Expression for probability that all receive variant from equation 22 of Bureau and Ruczinski
  numa = 1/2^(Ds+1) *(1 + 2^3) * 2*min(fkin.mean.f15157["101",f],0.5)/(2*Nf-1) + tmp$num
  # Expression for probability that none receive variant from equation 24 of Bureau and Ruczinski
  p0a = 1/2*(1 - 1/2^3)^3 * 2*min(fkin.mean.f15157["101",f],0.5)/(2*Nf-1) + tmp$p0
  pshare.f15157.vec[f-1] = numa/(1-p0a)
  }
#Results
pshare.f15157.vec  
@
The estimates are similar whichever founder pair is assumed to be related. The four first values are underestimates due to the roofing of the founders' kinship coefficient to 0.5. We take the mean of these values, weighted by the number of pairs they apply to, to get a summary measure.

<<summary adjusted sharing,eval=FALSE>>=
# Weight to give to each possibility: elements 2 to 7 represent two pairs
# one involving 101 and one involving 102
wvec = c(1,rep(2,6))
# Weighted mean of sharing probabilities
f15157.adjusted.psharing = weighted.mean(pshare.f15157.vec,wvec)
@

%The final estimate of the null sharing probability for family 15157 is \Sexpr{signif(f15157.adjusted.psharing,3)}. Applying the Bonferroni correction for 15 variants with low potential p-value, we obtain a corrected p = \Sexpr{signif(f15157.adjusted.psharing*15,2)}.

\subsection{Adjustment assuming all pairs of founders ancestral to at least two sequenced subjects are related}

Assuming all founders ancestral to at least two sequenced subjects are related may be more realistic than assuming only one pair of fouders are related since the estimated excess sharing between sequenced subjects varies from one pair of subjects to the next. Although all founders are assumed related, the assumption that a single pair of founders introduces the rare variant in the family is maintained.\\

Another change that we make is to estimate a mean kinship coefficient between founders from a population from the excess sharing between sequenced subjects from the same population instead of using family-specific estimates to infer the kinship coefficient between founders. We begin by extracting the kinship matrices of the sequenced subjects per population and checking that the dimensions of the infered and expected kinship matrices are equal.

<<excess sharing>>=
# Estimating excess sharing per population
german.fams = scan("data/german.fams.txt")

expectedkin.german = expected.kin.by.pair[seqfam%in%german.fams]
inferedkin.german = ocaffected.inferedkin$Kinship[ocaffected.inferedkin$FID%in%german.fams]


indian.fams = scan("data/indian.fams.txt")

expectedkin.indian = expected.kin.by.pair[seqfam%in%indian.fams]
inferedkin.indian = ocaffected.inferedkin$Kinship[ocaffected.inferedkin$FID%in%indian.fams]

filipino.fams = scan("data/filipino.fams.txt")

expectedkin.filipino = expected.kin.by.pair[seqfam%in%filipino.fams]
inferedkin.filipino = ocaffected.inferedkin$Kinship[ocaffected.inferedkin$FID%in%filipino.fams]

syrian.fams = scan("data/syrian.fams.txt")

expectedkin.syrian = expected.kin.by.pair[seqfam%in%syrian.fams]
inferedkin.syrian = ocaffected.inferedkin$Kinship[ocaffected.inferedkin$FID%in%syrian.fams]
@

We then calculate the excess sharing for the pairs of sequenced subjects from each population and check graphically on figure~\ref{excess_sharing} whether the excess sharing depends on the known kinship between sequenced subjects.

<<plotting excess sharing>>=
pdf("excess_sharing.pdf")
plot(expectedkin.german,(inferedkin.german-expectedkin.german),xlab="expected kinship",ylab="excess kinship",ylim=c(-0.1,0.05),log="x",yaxs="i")
points(expectedkin.indian,(inferedkin.indian-expectedkin.indian),pch=2)
points(expectedkin.filipino,(inferedkin.filipino-expectedkin.filipino),pch=3)
points(expectedkin.syrian,(inferedkin.syrian-expectedkin.syrian),pch=4)
abline(h=0)
legend(0.008,0.05,c("german","indian","filipino","syrian"),pch=1:4)
dev.off()
@
\begin{figure}
  \centering{\includegraphics{excess_sharing}}
  \label{excess_sharing}
\end{figure}

The plot for the Indian families alone is shown on Figure~\ref{excess_sharing_indian}.

<<plotting excess sharing indian>>=
pdf("excess_sharing_indian.pdf")
plot(expectedkin.indian,(inferedkin.indian-expectedkin.indian),xlab="expected kinship",ylab="excess kinship",xlim=c(1e-4,0.1),ylim=c(-0.05,0.05),log="x",yaxs="i")
abline(h=0)
dev.off()
@
\begin{figure}
  \centering{\includegraphics{excess_sharing_indian}}
  \label{excess_sharing_indian}
\end{figure}


We see that there is no evidence of excess sharing overall. Excess sharing is more likely to be detected for close relatives, except for the Syrians where there is less sharing than expected. We perform a sensitivity analysis assuming an mean excess sharing of 0.005.

The constant kinship coefficient between founder pairs is related to the excess sharing between sequenced subjects through a multiplicative constant $\kappa_{i_1i_2}$ which depends on the relationship between subjects $i_1$ and $i_2$. We compute these $\kappa_{i_1i_2}$ for the Indian families using equation 16 of Bureau and Ruczinski, and then divide excess sharing estimates by these constant to obtain estimates of the founder pairs kinship, which we then average over all pairs of sequenced subjects.

<<estimating founder kinship>>=

# Needs the object returned by RVsharing to compute the coefficients of proportionality
oc.obj = lapply(ped.tocompute,RVsharing.ped)
# Compute coefficients of proportionality kappa between kinship of the founders and excess sharing
source("rcode/compute_kinship_prop_coef.R")
k.list = sapply(oc.obj,compute.kinship.prop.coef)
fid.vec = sapply(ped.tocompute,function(obj)obj$famid[1])

# Extract the list of  kappa for the Indian population
k.list.indian = k.list[fid.vec%in%indian.fams]

# Estimate the kinship coefficient between founders in the Indian population
excess.indian.vec = 0.005
#k.vec.indian = unlist(k.list.indian)[unlist(k.list.indian)>0]
phi.indian = mean(excess.indian.vec/k.vec.indian)

@

We now return to the adjustment of the sharing probability.  

We approximate the probability that each pair of founder introduced the rare variant in a family (and no other founder) as twice the above kinship coefficient, i.e. \Sexpr{round(2*phi.indian,4)}. As there are 25 founder pairs ancestral to at least two sequenced subjects in the Indian family 15157, the total probability that any of the founder pairs introduce the rare variant approximated in this way is \Sexpr{round(50*phi.indian,4)} > 1. We therefore set $\phi^f$ to its maximal possible value of 0.02, and proceed to compute the probabilities of transmission of the variant to all and none of the sequenced subjects for each of the six distinct types of pairs of founders. Note that since the kinship coefficient $\phi^f$ is constant for all founder pairs, we can actually drop the probability that each pair of founder introduced the rare variant from the numerator and denominator of the sharing probability.

<<adjusted sharing terms 2,eval=FALSE>>=
# 6 different cases to consider (see Solving kinship of founders for family 15157)
numa = p0a = numeric(6)

# case of founder couple 101 and 102
# Expression for probability that all receive variant from equation 18 of Bureau and Ruczinski
numa[1] = 1/2^(Ds-nfd) 

# Vector of terms from equation 20 of Bureau and Ruczinski
vt = numeric(10)
# 0 child gets 2, 0 gets 1
vt[1] = 1/4^3
# 0 child gets 2, 1 gets 1
vt[2] = 3 * 3/4 * 1/(4*4*2)
# 0 child gets 2, 2 get 1
vt[3] = 3 * (3/4)^2 * 1/(4*2*2)
# 0 child gets 2, 3 get 1
vt[4] = (3/4)^3 * 1/2^3
# 1 child gets 2, 0 gets 1
vt[5] = 3 * 1/2 * 1/4^3
# 1 child gets 2, 1 gets 1
vt[6] = 6 * 1/2 * 3/4 * 1/(4*4*2)
# 1 child gets 2, 2 get 1
vt[7] = 3 * 1/2 * (3/4)^2 * 1/(4*2*2)
# 2 children get 2, 1 gets 0
vt[8] = 3 * 1/2^2 * 1/4^3
# 2 children get 2, 1 gets 1
vt[9] = 3 * 1/2^2 * 3/4 * 1/(4*4*2)
# 3 children get 3
vt[10] = 1/2^3 * 1/4^3

p0a[1] = sum(vt) 

# case of founder 101 or 102 with founders 202, 205 or 207
# Expression for probability that all receive variant from equation 21 of Bureau and Ruczinski
  numa[2] = 1/2^7 *(1/2^2 + 1/2) 
# Expression for probability that none receive variant from equation 23 of Bureau and Ruczinski
  p0a[2] = (1/2^3 + 3/4*1/2 + 1/2^2)*(1 - 1/2^3)^2 

# case of founder 101 or 102 with founders 302, 307 or 309
# Expression for probability that all receive variant from equation 22 of Bureau and Ruczinski
  numa[3] = 1/2^(Ds+1) *(1 + 2^3)
# Expression for probability that none receive variant from equation 24 of Bureau and Ruczinski
  p0a[3] = 1/2*(1 - 1/2^3)^3 

# case of pairs of founders among 202, 205 and 207
# numerator is 0
# Expression for probability that none receive variant from equation 26 of Bureau and Ruczinski
  p0a[4] = (1 - 1/2^2)^2

# case of pairs of founders 202-307, 202-309, 205-302, 205-309, 207-302 and 207-307
# numerator is 0
# Expression for probability that none receive variant from equation 26 of Bureau and Ruczinski
  p0a[5] = (1 - 1/2^2)*1/2

# case of pairs of founders among 202, 205 and 207
# numerator is 0
# Expression for probability that none receive variant from equation 26 of Bureau and Ruczinski
  p0a[6] = 1/2^2
@

We can now sum all terms for the numerator and denominator, weigthed by the number of founder pairs of each type, and get the estimated sharing probability.

<<adjusted sharing 2,eval=FALSE>>=
  npairs = c(1,6,6,3,6,3)
numam = weighted.mean(numa,npairs)
p0am = weighted.mean(p0a,npairs)

# Estimated sharing probability
f15157.adjusted.psharing2 = numam/(1-p0am)
@
%This estimated probability is \Sexpr{round(f15157.adjusted.psharing2,4)}, which is \Sexpr{round(f15157.adjusted.psharing2/true.rarebirds.sharingprob$oc.pshare[1])} times greater than the original estimate based on the known pedigree only.

\section{Extending to all rare variants}

<<>>=
# Define categories of variants to keep in the analysis: Exonic/splicing SNVs
includedcat = levels(low.freq$RefgeneGeneLocation)[c(2,3,6,8,11)]
# exonicvar.indiv is the list of all exonic/splicing shared variants
exonicvar.indiv = tapply(low.freq$RefgeneGeneLocation%in%includedcat&!(low.freq$CHROM%in%c("X","Y")),low.freq$mergevar,sum)
# exonicvar.indiv.all is the list of all exonic/splicing variants
exonicvar.indiv.all=tapply(low.freq.all$RefgeneGeneLocation%in%includedcat&!(low.freq.all$CHROM%in%c("X","Y")),low.freq.all$mergevar,sum)
table(exonicvar.indiv.all)
# We keep the interesting variants seen in between 1 and 11 families
exonicvar.indiv.all.seen = exonicvar.indiv.all[exonicvar.indiv.all>0 & exonicvar.indiv.all<=11]
length(exonicvar.indiv.all.seen)

# Create num.exonicvars, a vector of the number of families where each exonic/splicing variant is shared
# This assignment is just to get the names of exonicvar.indiv.all.seen
num.exonicvars = exonicvar.indiv.all.seen
# The next instruction will work only if names(exonicvar.indiv.all.seen) and names(exonicvar.indiv) are in the same order
num.exonicvars[names(exonicvar.indiv.all.seen)%in%names(exonicvar.indiv)] = exonicvar.indiv[names(exonicvar.indiv)%in%names(exonicvar.indiv.all.seen)]
num.exonicvars[!(names(exonicvar.indiv.all.seen)%in%names(exonicvar.indiv))] = 0

table(num.exonicvars)

# shared.vars is the vector of exonic/splicing variants that are shared in all families where they are seen
shared.vars = names(exonicvar.indiv.all.seen)[num.exonicvars==exonicvar.indiv.all.seen]
length(shared.vars)
# shared.candidate.vars is the subset of the shared.vars in the candidate gene list
shared.candidate.vars = shared.vars[shared.vars%in%candidate.low.freq$mergevar]

@
We find \Sexpr{length(shared.candidate.vars)} variants shared in all families where they are seen out of a total of \Sexpr{sum(names(exonicvar.indiv.all.seen)%in%candidate.low.freq.all$mergevar)} novel variants predicted to be damaging. One of these variants on chromosome 6 at position 10410472 is present in 10 families (shared in 1 and not shared in 9). Observing sharing in one family out of 10 is not unusual, so this variant will not be considered further.

<<Probability sharing RV candidates>>=
fams.for.sharedRV.candidate = candidate.low.freq.all$id[candidate.low.freq.all$mergevar%in%shared.vars]
vars.for.sharedRV.candidate = candidate.low.freq.all$mergevar[candidate.low.freq.all$mergevar%in%shared.vars]
logpshared.RV.candidate.vec = tapply(fams.for.sharedRV.candidate,vars.for.sharedRV.candidate,get.LODallshare,pshare=oc.pshare.res)
hits.candidate.vars = logpshared.RV.candidate.vec[!is.na(logpshared.RV.candidate.vec) & logpshared.RV.candidate.vec>2]
10^(-hits.candidate.vars)
@

\end{document}
